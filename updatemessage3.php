<?php
 /*
 This is to store all the messages that are posted to the blockchain by user.
 It need to know which blocknum last updated. Then it will start to download the lastblocknumupdated+1 to latestblocknum
 and start to store all data into db.
 
 */
 
 


const GENERATOR = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];
const CHARSET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';
const CHARKEY_KEY = [
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    15, -1, 10, 17, 21, 20, 26, 30,  7,  5, -1, -1, -1, -1, -1, -1,
    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,
    1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1,
    -1, 29, -1, 24, 13, 25,  9,  8, 23, -1, 18, 22, 31, 27, 19, -1,
    1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1
]; 
  
//////////// Show realtime printout, no cache  
header( 'Content-type: text/html; charset=utf-8' );
header("Cache-Control: no-cache, must-revalidate");
header ("Pragma: no-cache");
set_time_limit(0);
ob_implicit_flush(1);
///////////////////////////////


  
  
 $con = mysqli_connect('globaldefi.fatcowmysql.com', 'zildbadmin1198', 'Zil119955#8pwd', "dbzilliqa"); 
  
 //$con="";
//if (!$con) 	  die('Could not connect: ' . mysqli_error($con));

   //2321645
   $lastblocknumupdated=2321645-1;
   
   $latestblocknum=GetLatestTxBlock( 'https://dev-api.zilliqa.com');
   echo "Latest block=".$latestblocknum;
   echo "<br><br>";
   
		// 2323302    1tx
		// 2323000    0tx
		// 2321645    2tx
        // 2321692    invalid sendtoAddr		

 
   //$rtn=getContractMessage(2323302, $con, 'https://dev-api.zilliqa.com');
  // exit();
 
   
     
    
   for ($blocknum=2315528; $blocknum<=$latestblocknum; $blocknum++)  
  //for ($blocknum=2315269; $blocknum<=2321476; $blocknum++)
  {
		echo "<br><br>";
	    echo "blocknum=".$blocknum;
		echo "<br><br>";
		$attempt=0; $rtn=0;
		while ($attempt<=5 && $rtn==0)
		{
			$rtn=getContractMessage($blocknum, $con, 'https://dev-api.zilliqa.com');
			$attempt++;
		}
		if ($attempt==6 && $rtn==0)
		{   
				echo "FAILED ATTEMPT 6 times!";
				return; // failed
		}
  }
  setLastUpdatedBlockNum($con, $blocknum);
  
  exit();
  
   
	
	
	////
    echo "Update Zilstake Info 2....";					
	if(ob_get_level()>0) ob_end_flush();   //// Realtime printout
    echo "<br>";
	
	 
  
  
  
  
  
 //downloadzildata($con,$currenttimestamp);
mysqli_close($con);  
  
  
  //////////////////////////////// main end here /////////////////////////////////////////
  
 /*

headers = {
    'Content-Type': 'application/json',
}

data = '{ "id": "1", "jsonrpc": "2.0", "method": "GetSmartContractSubState", "params": ["B780e8095b8BA85A7145965ed632b3B774ac51cE","deposit_amt_deleg",[]] }'

response = requests.post('https://api.zilliqa.com/', headers=headers, data=data)
json_data = response.json() 
 
 
 */
 function setLastUpdatedBlockNum($con, $lastupdatedblocknum)
 {
	 
	 		$qry="UPDATE  tblmessageinfo Set flastupdatedblocknum=$lastupdatedblocknum  ";
			//echo $qry;
			$result = mysqli_query($con,$qry);	
			if (!$result) 
			{	
					$errstr=sprintf("Update tblmessageinfo Failed! ERROR=910<br>");
					//mysqli_close($con);
					echo $errstr; return 0;
					
			}
			else
			{
					echo "Update tblmessageinfo success"."<br>";
					return 1;
			}
	 
 }
 
 function getLastUpdatedBlockNum($con )
 { 
	 		$qry="Select * from  tblmessageinfo    ";
			//echo $qry;
			$result = mysqli_query($con,$qry);	
			if (!$result) 
			{	
					$errstr=sprintf("Select from tblmessageinfo Failed! ERROR=910<br>");					 
					echo $errstr; 					
			}
			else
			{
				if ($row = mysqli_fetch_assoc($result)) 
				{				
						$lastupdatedblocknum 	=intval($row["flastupdatedblocknum"]);						
					    return $lastupdatedblocknum;					 
				}
			}
			return 0;	 
 }

 
  
 function GetTxnBodiesForTxBlock($blocknum, $ssn)
 {
	 
			// Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
		$ch = curl_init();

		curl_setopt($ch, CURLOPT_URL, $ssn);
		//curl_setopt($ch, CURLOPT_URL, 'https://dev-api.zilliqa.com');		
		
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
		

		 
		
		//curl_setopt($ch, CURLOPT_POST, 1);
		 //curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n    \"id\": \"1\",\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"GetTxnBodiesForTxBlock\",\n    \"params\": [\"2323302\"]\n}"); // block with 1 tx only

		
		//curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n    \"id\": \"1\",\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"GetTxnBodiesForTxBlock\",\n    \"params\": [\"2323000\"]\n}");  // block with no tx  

		//curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n    \"id\": \"1\",\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"GetTxnBodiesForTxBlock\",\n    \"params\": [\"2321645\"]\n}"); // block with multiple tx

		$url='{"id": "1","jsonrpc": "2.0","method": "GetTxnBodiesForTxBlock","params": ["'.$blocknum.'"]}';
		curl_setopt($ch, CURLOPT_POSTFIELDS, $url);	
			
			

		
		$headers = array();
		$headers[] = 'Content-Type: application/json';
		curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

		$result = curl_exec($ch);
		if (curl_errno($ch)) {
			echo 'Error:' . curl_error($ch);
		}
		curl_close($ch);
		return ($result);
		 
 }
  
  

 




 function GetTxBlock($blocknum, $ssn)
 {
	
			// Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
			$ch = curl_init();
			//curl_setopt($ch, CURLOPT_URL, 'https://api.zilliqa.com/');
			curl_setopt($ch, CURLOPT_URL, $ssn);
			
			curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
			curl_setopt($ch, CURLOPT_POST, 1);
			
			
			$url='{"id": "1","jsonrpc": "2.0","method": "GetTxBlock","params": ["'.$blocknum.'"]}';
			
			
			
			//curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n    \"id\": \"1\",\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"GetTxBlock\",\n    \"params\": [\"40\"]\n}");

			curl_setopt($ch, CURLOPT_POSTFIELDS, $url);

			$headers = array();
			$headers[] = 'Content-Type: application/json';
			curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

			$result = curl_exec($ch);
			if (curl_errno($ch)) {
				echo 'Error:' . curl_error($ch);
			}
			curl_close($ch);
			
			try
			{
			 $contents = utf8_encode($result); 
			 $results = json_decode($contents, true); 
			 //echo "result1<br>";
			//print_r($results['result']);
			//echo "<br>><br><br>";
			//echo "array1<br>";
			$r=$results['result'];
			if (is_null($r))
			{
				return 0;
				
			}
			
			$array1 = array_keys($r);
			//echo "<br>><br><br>";
			//echo "array2<br>";
			//print_r($array1);
 
			$array2 = array_values($r);
			//print_r($array2);
			//echo "<br>><br><br>";			
			//print_r($array2[0]);
			//echo "<br>><br><br>";			
			$timestamp=$array2[1]['Timestamp'] ;		
			return $timestamp;
			}
			catch(Exception $e) {
			  print_r($result);
			}
			
 }

 

 
 
 function GetLatestTxBlock( $ssn)
 {
	
			// Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
			$ch = curl_init();
			//curl_setopt($ch, CURLOPT_URL, 'https://api.zilliqa.com/');
			curl_setopt($ch, CURLOPT_URL, $ssn);
			
			curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
			curl_setopt($ch, CURLOPT_POST, 1); 
			$url='{"id": "1","jsonrpc": "2.0","method": "GetLatestTxBlock","params": [""]}'; 
			curl_setopt($ch, CURLOPT_POSTFIELDS, $url);

			$headers = array();
			$headers[] = 'Content-Type: application/json';
			curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

			$result = curl_exec($ch);
			if (curl_errno($ch)) {
				echo 'Error:' . curl_error($ch);
			}
			curl_close($ch);
			
			try
			{
			 $contents = utf8_encode($result); 
			 $results = json_decode($contents, true); 
			 //echo "result1<br>";
			//print_r($results['result']);
			//echo "<br>><br><br>";
			//echo "array1<br>";
			$r=$results['result'];
			if (is_null($r))
			{
				return 0;
				
			}
	
 
			$blocknum=$results['result']['header']['BlockNum'];

	 		
			return $blocknum;
			}
			catch(Exception $e) {
			  print_r($result);
			}
			
 }
 
 
 
 
 
 
 
 
 
  function isAddress($address) {
    if (!preg_match('/^(0x)?[0-9a-f]{40}$/i',$address)) {
        // Check if it has the basic requirements of an address
        return false;
    } elseif (preg_match('/^(0x)?[0-9a-f]{40}$/',$address) || preg_match('/^(0x)?[0-9A-F]{40}$/',$address)) {
        // If it's all small caps or all all caps, return true
        return true;
    } else {
        // Otherwise check each case
        return isChecksumAddress($address);
    }
} 

  
  function getContractMessage($blocknum, $con, $ssn)
  {  
				 
				
               // echo "Getting RPC Data...";echo "<br>";	if(ob_get_level()>0) ob_end_flush();   //// Realtime printout
				//$contents=getRPCdata();
				$contents=GetTxnBodiesForTxBlock($blocknum, $ssn );
				
				
				 echo "Data received..."; echo "<br>";	if(ob_get_level()>0) ob_end_flush();   //// Realtime printout


						//$contents = geturlcontent($url);
				$contents = utf8_encode($contents);
				
	 			
				$results = json_decode($contents, true);  // need to json_decode( , true) the word true then only we can user_error
				
				
				$attempt=0; $timestamp=0;
				while ($attempt<=5 && $timestamp==0)
				{
					$timestamp=GetTxBlock($blocknum, $ssn);
					$attempt++;
				}
				if ($attempt==6 && $timestamp==0)
						return 0; // failed
				  
	 
				if (strpos($contents,"TxBlock has no transactions")=== false)  
				{
			
				}
				else
				{
					 
					return -1;							
					
				}
				
				//print_r($results);
				if (!array_key_exists('result',$results))
				{
					echo "result key not founnd!";
					return -1;
					
				}
																	  // associate array like $results["bitcoin"]["usd"]
				//$r = $results['result']['deposit_amt_deleg'];
				$numarray=count($results['result']);
				
				//echo "Array count=". $numarray ;
				//echo "<br>";
				
				
				for ($num=0; $num<$numarray; $num++)
				{
				
							$r=$results['result'][$num];			 
						//	echo "num=".$num; echo "<br>";			  
						//	 echo " <br><br>";	
						//	 echo "<br><br><br>Printing array1...<br> ";
							 // for invalid i mean no contract call_ 
							//Printing array1...
//Array ( [0] => ID [1] => amount [2] => gasLimit [3] => gasPrice [4] => nonce [5] => receipt [6] => senderPubKey [7] => signature [8] => toAddr [9] => version )
							// For valid with contract call_
							// Printing array1...
//Array ( [0] => ID [1] => amount [2] => data [3] => gasLimit [4] => gasPrice [5] => nonce [6] => receipt [7] => senderPubKey [8] => signature [9] => toAddr [10] => version )
							 
							$array1 = array_keys($r);
							//$array2 = array_keys($array1);
							$array2 = array_values($r);
						//	 print_r($array1);
						//	 echo "<br><br><br>Printing array2...<br> ";				 
						//	  print_r($array2);
							
							if (!array_key_exists('data',$r))
							{
								echo "<br><br>data key not found!<br><br>";
								return -2;
								
							}
							 						
							  
							  
							 //&$nonce, &$gasprice, &$gaslimit, &$timestamp, &$message, &$ziladdress, &$eventname
							 
							 $txid=$array2[0];
							 $amount=$array2[1];
							 $data=$array2[2];
							 $gaslimit=$array2[3];
							 $gasprice=$array2[4];
							 $nonce=$array2[5];
							 
							 $senderpubkey=$array2[7];
							 
							 
							 
							
						//	 echo "gaslimit=".$gaslimit;echo "<br>";
						//	 echo "gasprice=".$gasprice;echo "<br>";
						//	 echo "senderPubKey=".$senderpubkey;echo "<br>";							 
							 $receipt=$array2[6];
							 
							  
							 
							
							//echo "toaddress=".$toaddress;
							//echo "<br>";
							
	
							 
							$toaddress=$array2[9];
							$toaddress="0x".$toaddress;
							
							if (!isAddress($toaddress))
							{
								//echo "Invalid to address=".$toaddress;
								//print_r($results);
								continue;
							}
							
						//	echo "<br>toaddress=".$toaddress;
							$toaddresszil=toBech32Address($toaddress);  // this is the contract address, check this one! zil1644y20t8ksj5zm73krgasrw4dnhew020ld0q4y
							
							
							if ($toaddresszil!="zil1644y20t8ksj5zm73krgasrw4dnhew020ld0q4y")
								continue;
							
							 echo "txid=".$txid;echo "<br>";
						//	echo "<br>ziltoaddress=".$toaddresszil;
						//	echo "<br>";				 
								//echo "<br><br><br><br><br><br><br><br>";				 
							 
							 //print_r($receipt);
							  
							$array3 = array_keys($receipt);
							//$array2 = array_keys($array1);
							$array4 = array_values($receipt);	
							//	echo "<br><br><br><br><br><br><br><br>";					
							// echo "<br><br>Printing array3...<br><br>";					 
						//	 print_r($array3);
						//	 echo "<br><br>Printing array4...<br><br>";				 
						//	 print_r($array4);			

							$cumulativegas=$array4[1];
							
							$epochnum=$array4[2];
							$eventlogs=$array4[3];
							//	echo "<br><br><br><br><br><br><br><br>";
						//	echo "<br><br>Printing eventlogs...<br><br>";		
						//	 print_r($eventlogs);
							$array5 = array_keys($eventlogs);
							 $array2 = array_keys($array1);
							$array6 = array_values($eventlogs);	
						//	 echo "<br><br>Printing array5...<br><br>";					 
						//	  print_r($array5);
						//	 echo "<br><br>Printing array6...<br><br>";				 
						//	  print_r($array6);	
							
							$array7=$array6[0];
							
							
							$array8 = array_keys($array7);
							  
							$array9 = array_values($array7);	
						//	 echo "<br><br>Printing array8...<br><br>";					 
						//	  print_r($array8);
						//	 echo "<br><br>Printing array9...<br><br>";				 
						//	  print_r($array9);		
								
							$eventname=$array9[0];
							$address=$array9[1];
						//	echo "<br>SenderAddress=".$address;
							
							$address="0x".$address;
							
							$senderaddresszil=toBech32Address($address);  // should be sender address, not confirm
							
						//	echo "<br>SenderAddress=".$address;
						//	echo "<br>SenderAddresszil=".$senderaddresszil;
						//	echo "<br>";
							
							$deeper=$array9[2];
							$array10 = array_keys($deeper);
							 
							$array11 = array_values($deeper);	
						//	 echo "<br><br>Printing array10...<br><br>";					 
						//	  print_r($array10);
						//	 echo "<br><br>Printing array11...<br><br>";				 
						//	  print_r($array11);	

							$evendeeper=$array11[0];
							
							$array12 = array_keys($evendeeper);
							 
							$array13 = array_values($evendeeper);	
						//	 echo "<br><br>Printing array12...<br><br>";					 
						 //	 print_r($array12);
						// 	echo "<br><br>Printing array13...<br><br>";				 
						// 	 print_r($array13);	   	
						
							 				
						

							 $message=$array13[1];
							 
						//	echo "msg=";
						//	echo $message;
						//////////////////////////////// INSERT into db////////////////////////////////////////////////////////	
						$updatedb=true;
						if ($updatedb)
						{
								$datestr=date("Y-m-d H:i:s", intval($timestamp));  
								$qry = "INSERT INTO tblmessage ".
								" (fdate,ftimestamp,    ftxid,fmessage ) VALUES".
								" ('$datestr',  $timestamp, '$txid','$message' ) ";	
								echo $qry;			
								$result = mysqli_query($con,$qry);	
								if (!$result) 
								{	
										$errstr=sprintf("Insert tblmessage Failed! ERROR=910<br>");
										mysqli_close($con);
										echo $errstr; exit(0);					
								}
								else
								{
										echo "Blockbnum=".$blocknum." Insert tblmessage into dbzilliqa success"."<br>";
										if(ob_get_level()>0) ob_end_flush(); 
								} 
						}
						
						 
						//echo "<br><br>";
						///////////////////////////////////////////////////////////////////////////////////////////////	
							
				}
				 
		return 1;	 
				 
	}
	


 
	
	
 




/**
 * @param int[] $values
 * @param int $numValues
 * @return int
 */
function polyMod(array $values, $numValues)
{
    $chk = 1;
    for ($i = 0; $i < $numValues; $i++) {
        $top = $chk >> 25;
        $chk = ($chk & 0x1ffffff) << 5 ^ $values[$i];

        for ($j = 0; $j < 5; $j++) {
            $value = (($top >> $j) & 1) ? GENERATOR[$j] : 0;
            $chk ^= $value;
        }
    }

    return $chk;
}

/**
 * Expands the human readable part into a character array for checksumming.
 * @param string $hrp
 * @param int $hrpLen
 * @return int[]
 */
function hrpExpand($hrp, $hrpLen)
{
    $expand1 = [];
    $expand2 = [];
    for ($i = 0; $i < $hrpLen; $i++) {
        $o = \ord($hrp[$i]);
        $expand1[] = $o >> 5;
        $expand2[] = $o & 31;
    }

    return \array_merge($expand1, [0], $expand2);
}

/**
 * Converts words of $fromBits bits to $toBits bits in size.
 *
 * @param int[] $data - character array of data to convert
 * @param int $inLen - number of elements in array
 * @param int $fromBits - word (bit count) size of provided data
 * @param int $toBits - requested word size (bit count)
 * @param bool $pad - whether to pad (only when encoding)
 * @return int[]
 * @throws Bech32Exception
 */
function convertBits(array $data, $inLen, $fromBits, $toBits, $pad = true)
{
    $acc = 0;
    $bits = 0;
    $ret = [];
    $maxv = (1 << $toBits) - 1;
    $maxacc = (1 << ($fromBits + $toBits - 1)) - 1;

    for ($i = 0; $i < $inLen; $i++) {
        $value = $data[$i];
        if ($value < 0 || $value >> $fromBits) {
           // throw new Bech32Exception('Invalid value for convert bits');
        }

        $acc = (($acc << $fromBits) | $value) & $maxacc;
        $bits += $fromBits;

        while ($bits >= $toBits) {
            $bits -= $toBits;
            $ret[] = (($acc >> $bits) & $maxv);
        }
    }

    if ($pad) {
        if ($bits) {
            $ret[] = ($acc << $toBits - $bits) & $maxv;
        }
    } else if ($bits >= $fromBits || ((($acc << ($toBits - $bits))) & $maxv)) {
       // throw new Bech32Exception('Invalid data');
    }

    return $ret;
}

/**
 * @param string $hrp
 * @param int[] $convertedDataChars
 * @return int[]
 */
function createChecksum($hrp, array $convertedDataChars)
{
    $values = \array_merge(hrpExpand($hrp, \strlen($hrp)), $convertedDataChars);
    $polyMod = polyMod(\array_merge($values, [0, 0, 0, 0, 0, 0]), \count($values) + 6) ^ 1;
    $results = [];
    for ($i = 0; $i < 6; $i++) {
        $results[$i] = ($polyMod >> 5 * (5 - $i)) & 31;
    }

    return $results;
}
 

/**
 * @param string $hrp
 * @param array $combinedDataChars
 * @return string
 */
function encode($hrp, array $combinedDataChars)
{
    $checksum = createChecksum($hrp, $combinedDataChars);
    $characters = \array_merge($combinedDataChars, $checksum);

    $encoded = [];
    for ($i = 0, $n = count($characters); $i < $n; $i++) {
        $encoded[$i] = CHARSET[$characters[$i]];
    }

    return "{$hrp}1" . \implode('', $encoded);
}


// working!
function toBech32Address($address){
  $HRP="zil";
 
   
  $address=substr($address, 2);
 
  
  
  $a=array();
  //$s="00034c431f642dfca0129694061263d72049a909";
  $a = array_map('hexdec', str_split($address, 2));
  
  
  //$addr[0]=substr($address, 2); // remove first 2 chars which is 0x
  //echo "addr0=".$addr[0];
  $addrBz = convertBits($a ,20,  8,  5  );
 
  return encode($HRP, $addrBz);
} 
	
	
	
	
	
	
	
	
	
	
	
?>